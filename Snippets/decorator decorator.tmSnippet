<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>content</key>
	<string>def ${1:my_decorator}(${2:params_specified_in_decorator}):
    # params_specified_in_decorator is the "something" in the @$1(...) line
    
    def decorator_function(decorator_or_function):
        # decorator_or_function is the decorated function: aka the function
        # UNDER the @decorator lines. Of course, decorator_or_function could be
        # another decorator (and that's OK, it' doesn't matter to our decorator)
        
        @wraps(decorator_or_function)
        def kick_it_off(params_for_decorated_function_or_decorator):
            # because this is in the $1 function, the parameters of $1 ("$2") are in scope
            
            $0
            decorator_or_function(params_for_decorated_function_or_decorator)
        
        return kick_it_off
    
    return decorator_function
</string>
	<key>name</key>
	<string>decorator decorator</string>
	<key>scope</key>
	<string>source.python</string>
	<key>tabTrigger</key>
	<string>decdec</string>
	<key>uuid</key>
	<string>938A1B1F-11BA-42B4-8CC8-A3B3FDF7D5A7</string>
</dict>
</plist>
